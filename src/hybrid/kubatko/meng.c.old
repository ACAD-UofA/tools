/*
 * Species tree
 *        /\        ---
 *       /  \        |
 *      /    \       tm
 *     /      \      |
 *    /--------\    ---
 *   /  y | 1-y \
 *  /     |      \
 * A      B       C
 *
 * Gene tree 1, occurs with probability y.
 *    /\
 *   /  \
 *  /\   \
 * A  B   C
 *
 * Gene tree 2, occurs with probability 1-y.
 *    /\
 *   /  \
 *  /   /\
 * A   B  C
 *
 */

#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <float.h>
#include <math.h>
#include <pthread.h>

#include <htslib/hts.h>
#include <htslib/vcf.h>

#include "kmath.h"

typedef int gt3_t[3];

static krand_t *kr;
static int quit_signalled;

int count_ab = 0;
int count_bc = 0;

/*
 * Choose the most parsimonious topology from the character states,
 * returning the probability for that topology.
 *
 * abc, character states for A, B and C, to inform the topology.
 * p_c_ab, Pr(C(AB))
 * p_a_bc, Pr(A(BC))
 * p_b_ac, Pr(B(AC))
 */
double
choose_pr_from_topo(int abc[3], double p_c_ab, double p_a_bc, double p_b_ac)
{
	// A==B, A!=C
	if (abc[0] == abc[1] && abc[0] != abc[2]) {
		count_ab++;
		return p_c_ab;
	}

	// B==C, A!=C
	if (abc[1] == abc[2] && abc[0] != abc[2]) {
		count_bc++;
		return p_a_bc;
	}

	// A==C, A!=B
	if (abc[0] == abc[2] && abc[0] != abc[1])
		return p_b_ac;

	// uninformative
	return 1.0/3.0;
}

/*
 * Pr(topology | tree 1, tm)
 * abc, character states for A, B and C, to inform the topology.
 * tm, time between coalescent events.
 */
double
tree1_density(int abc[3], double tm)
{
	// See Meng & Kubatko (2009), Fig 2.
	double p_c_ab = 1.0 - (2.0/3.0) * exp(-tm); // Pr(C(AB))
	double p_a_bc = 1.0/3.0 * exp(-tm); // Pr(A(BC))
	double p_b_ac = 1.0/3.0 * exp(-tm); // Pr(B(AC))

	return choose_pr_from_topo(abc, p_c_ab, p_a_bc, p_b_ac);
}

/*
 * Pr(topology | tree 2, tm)
 */
double
tree2_density(int abc[3], double tm)
{
	double p_c_ab = 1.0/3.0 * exp(-tm);
	double p_a_bc = 1.0 - (2.0/3.0) * exp(-tm);
	double p_b_ac = 1.0/3.0 * exp(-tm);

	return choose_pr_from_topo(abc, p_c_ab, p_a_bc, p_b_ac);
}

double
llik(double y, double t, gt3_t *abc, size_t nsites)
{
	double ll = 0.0;
	int i;

	for (i=0; i<nsites; i++) {
		ll += log(y*tree1_density(abc[i], t)
			+ (1.0-y) * tree2_density(abc[i], t));
	}

	return ll;
}

/*
 * Propose new t.
 *
 * Sample a time between hybridisation and top of tree,
 * in units of generations per effective population size.
 */
double
t_rand(double last_t)
{
#define GEN_TIME 8.0
#define Ne 1e4
// 100kya, lower bound on steppe/wisent divergence
#define TM0_LOWER (1e5/GEN_TIME)/(2.0*Ne)
// 5.9mya, upper bound on steppe/wisent/aurochs divergence
#define TM1_UPPER (5.9e6/GEN_TIME)/(2.0*Ne)
#define TDIFF (TM1_UPPER-TM0_LOWER)
	double t = kr_normal(kr);
	t = last_t + t*0.01*TDIFF;
	if (t < 0.0)
		t = -t;
	if (t > TDIFF)
		t = 2*TDIFF - t;
	return t;
}

/*
 * Propose new y, on closed interval [0,1].
 */
double
y_rand(double last_y)
{
	double y = kr_normal(kr);
	y = last_y + y*0.01;
	if (y < 0.0)
		y = -y;
	else if (y > 1.0)
		y = 2.0 -y;
	return y;
}

int
mcmc(FILE *fp, int y, gt3_t *abc, size_t nsites, int sampling_period)
{
	double y0, y1;
	double t0, t1;
	double ll0, ll1, lldiff;
	int i = 0;

	y0 = y1 = (y == -1) ? 0.5 : y;
	t0 = TDIFF/2.0;
	ll0 = -DBL_MAX;

	fprintf(fp, "y_current\ty_proposed\tt_current\tt_proposed\tloglik_current\tloglik_proposed\n");

	do {
		if (y == -1)
			y1 = y_rand(y0);
		t1 = t_rand(t0);
		ll1 = llik(y1, t1, abc, nsites);

		lldiff = ll1 - ll0;
		if (lldiff > 0.0 || log(kr_drand(kr)) < lldiff) {
			// accept new state
			ll0 = ll1;
			y0 = y1;
			t0 = t1;
		}

		i++;
		if (i%sampling_period == 0) {
			fprintf(fp, "%lg\t%lg\t%lg\t%lg\t%lg\t%lg\n",
					y0, y1, t0, t1, ll0, ll1);
			i = 0;
		}
	} while (!quit_signalled);

	return 0;
}

struct thread_stuff {
	pthread_t tid;
	FILE *fp;
	int y;
	gt3_t *abc;
	size_t nsites;
	int sampling_period;
};

void *
mcmc_start(void *arg)
{
	struct thread_stuff *ts = arg;
	intptr_t ret;

	ret = mcmc(ts->fp, ts->y, ts->abc, ts->nsites, ts->sampling_period);

	return (void *)ret;
}

void
handle_sigint(int sig)
{
	quit_signalled = 1;
}

int
do_mcmc(gt3_t *abc, size_t nsites, int sampling_period)
{
	char fn[1024];
	struct thread_stuff ts[3] {[0].y = -1, [1].y = 1, [2].y = 0 };
	pthread_attr_t attr;
	void *res;
	int i;
	int ret = 0;

	for (i=0; i<3; i++) {
		ts[i].abc = abc;
		ts[i].nsites = nsites;
		ts[i].sampling_period = sampling_period;

		sprintf(fn, "chain_y%d.txt", ts[i].y);
		ts[i].fp = fopen(fn, "w");
		if (ts[i].fp == NULL) {
			fprintf(stderr, "Error: %s: %s\n", fn, strerror(errno));
			ret = -1*(i+1);
			goto err1;
		}
	}

	if (pthread_attr_init(&attr) != 0) {
               perror("pthread_attr_init");
	       ret = -4;
	       goto err3;
	}

	quit_signalled = 0;
	signal(SIGINT, handle_sigint);
	signal(SIGTERM, handle_sigint);

	for (i=0; i<3; i++) {
		if (pthread_create(&ts[i].tid, &attr, mcmc_start, &ts[i]) != 0) {
			perror("pthread_create");
			quit_signalled = 1;
			ret = -2;
			break;
		}
	}

	pthread_attr_destroy(&attr);

	// wait for threads to end
	i--;
	for (; i>=0; i--) {
		if (pthread_join(ts[i].tid, &res) != 0) {
			perror("pthread_join");
			ret = -3;
		}
	}

err1:
	for (i=0; i<3; i++)
		fclose(ts[i].fp);
err0:
	return ret;
}


/*
 * Parse vcf file, extracting genotypes for specified samples.
 *
 * vcf_fn, filename of vcf or bcf.
 * samples[3], list of sample names, for samples to use on tree tips A, B, C.
 * abc, list of extracted genotypes for each of A, B, C.
 * nsites, number of loci for which genotypes were extracted.
 */
int
get_gts_from_vcf(char *vcf_fn, char *samples[3], gt3_t **abc, size_t *nsites)
{
	htsFile *fp;
	bcf_hdr_t *hdr;
	bcf1_t *rec;
	int si[3]; // sample ids
	int ret;
	int i;
	int ngt, ngt_arr = 0;
	int *gt_arr = NULL;
	int abc_slots = 0;

	*abc = NULL;
	*nsites = 0;

	fp = hts_open(vcf_fn, "r");
	if (fp == NULL) {
		ret = -1;
		goto err0;
	}

	hdr = bcf_hdr_read(fp);
	if (hdr == NULL) {
		ret = -2;
		goto err1;
	}

	for (i=0; i<3; i++) {
		si[i] = 2*bcf_hdr_id2int(hdr, BCF_DT_SAMPLE, samples[i]);
		if (si[i] == -1) {
			fprintf(stderr, "Error: %s: no sample ``%s''.\n",
					vcf_fn, samples[i]);
			ret = -3;
			goto err2;
		}
	}

	rec = bcf_init1();
	if (rec == NULL) {
		perror("calloc: bcf_init1");
		ret = -4;
		goto err2;
	}

	int idx;
	int skip;
	int a0, a1;
	gt3_t gt;

	while (bcf_read1(fp, hdr, rec) >= 0) {
		// only take biallelic SNPs
		if (!bcf_is_snp(rec) || rec->n_allele != 2)
			continue;

		ngt = bcf_get_genotypes(hdr, rec, &gt_arr, &ngt_arr);
		if (ngt != ngt_arr) {
			fprintf(stderr, "Error: %s: missing genotypes at %s:%d.\n",
					vcf_fn, bcf_seqname(hdr, rec), rec->pos+1);
			ret = -5;
			goto err3;
		}

		skip = 0;
		for (i=0; i<3; i++) {
			idx = si[i];

			if (bcf_gt_is_missing(gt_arr[idx])) {
				// skip missing
				skip = 1;
				break;
			}

			a0 = bcf_gt_allele(gt_arr[idx]);
			a1 = bcf_gt_allele(gt_arr[idx+1]);

#if 0
			// number of alternate alleles
			gt[i] = a0 + a1;
#elif 0
			// sample allele one
			if (a0 != a1) {
				if (kr_drand(kr) < 0.5)
					gt[i] = 0;
				else
					gt[i] = 1;
			}
#else
			// homozygotes only
			if (a0 != a1) {
				skip = 1;
				break;
			}
			gt[i] = a0;
#endif
		}

		if (skip)
			continue;

		if (*nsites == abc_slots) {
			void *tmp;
			if (abc_slots == 0)
				abc_slots = 1024;
			else
				abc_slots *= 2;
			tmp = realloc(*abc, abc_slots * sizeof(gt3_t));
			if (tmp == NULL) {
				fprintf(stderr, "realloc: abc_slots=%d: %s\n",
						abc_slots, strerror(errno));
				ret = -6;
				goto err3;
			}
			*abc = tmp;
		}

		(*abc)[*nsites][0] = gt[0];
		(*abc)[*nsites][1] = gt[1];
		(*abc)[*nsites][2] = gt[2];
		(*nsites)++;
	}


	ret = 0;
err3:
	if (gt_arr != NULL)
		free(gt_arr);

	if (ret != 0) {
		free(*abc);
		*abc = NULL;
		*nsites = 0;
	}

	bcf_destroy1(rec);
err2:
	bcf_hdr_destroy(hdr);
err1:
	hts_close(fp);
err0:
	return ret;
}

// print likelihood surfaces for a y*t grid.
int
llik_surfaces(gt3_t *abc, size_t nsites)
{
	double y;
	double t;

	FILE *fp = fopen("llik.txt", "w");
	if (fp == NULL) {
		fprintf(stderr, "Error: llik.txt: %s\n", strerror(errno));
		return -1;
	}

	// possible gene trees
	gt3_t gt_ab = {0,0,1}; // (AB,C) - peak at y=1
	gt3_t gt_bc = {1,0,0}; // (A,BC) - peak at y=0
	gt3_t gt_ac = {0,1,0}; // (B,AC) - flat w.r.t. y

	fprintf(fp, "y\tt\t(AB,C)\t(A,BC)\t(B,AC)\tData\n");

	for (y=0.0; y<=1.0; y+=0.01) {
		for (t=0; t<=TDIFF; t+=(TDIFF/20.0)) {
			fprintf(fp, "%lf\t%lf\t%lf\t%lf\t%lf\t%lf\n",
					y,
					t,
					llik(y, t, &gt_ab, 1),
					llik(y, t, &gt_bc, 1),
					llik(y, t, &gt_ac, 1),
					llik(y, t, abc, nsites));
		}
	}

	fclose(fp);

	return 0;
}

int
main(int argc, char **argv)
{
	gt3_t *abc;
	size_t nsites;
	int sampling_period;

	if (argc != 6) {
		fprintf(stderr, "%s sampling_period file.vcf A B C\n", argv[0]);
		return -1;
	}

	errno = 0;
	sampling_period = strtoul(argv[1], NULL, 0);
	if (errno || sampling_period < 1 || sampling_period > 1e7) {
		fprintf(stderr, "sampling_period=%s not on the interval [1,1e7].\n", argv[1]);
		return -3;
	}

	kr = kr_srand(122);
	//kr = kr_srand(getpid());

	if (get_gts_from_vcf(argv[2], argv+3, &abc, &nsites) < 0)
		return -4;

	if (llik_surfaces(abc, nsites) < 0)
		return -5;

	if (do_mcmc(abc, nsites, sampling_period) < 0)
		return -6;

	free(abc);
	free(kr);
	
	return 0;
}

